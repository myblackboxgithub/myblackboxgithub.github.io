<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Lumia.Sense.Testing</name>
  </assembly>
  <members>
    <member name="T:Lumia.Sense.Testing.ActivityMonitorSimulator">
      <summary>
Represents an activity state monitor sensor.
</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.ActivateAsync">
      <summary>
Re-establishes connection to sensor, if not already available
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.DeactivateAsync">
      <summary>
Closes the connection to sensor
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="P:Lumia.Sense.Testing.ActivityMonitorSimulator.Enabled">
      <summary>
Enables or disables activity change event monitoring.
</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetActivityAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the device activity at given time.
</summary>
      <param name="timestamp">time stamp</param>
      <returns>Activity at given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of activities occured during given time period.
</summary>
      <param name="periodFrom">time period start</param>
      <param name="span">time period length</param>
      <returns>Activity history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetCurrentReadingAsync">
      <summary>
Gets the current activity
</summary>
      <returns>Current activity</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <param name="startTime">Starting time for recording.</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="E:Lumia.Sense.Testing.ActivityMonitorSimulator.ReadingChanged">
      <summary>
Occurs each time activity changes.
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.ActivityMonitorSimulator.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.Testing.PlaceMonitorSimulator">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.ActivateAsync">
      <summary>
Re-establishes connection to sensor, if not already available
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.DeactivateAsync">
      <summary>
Closes the connection to sensor
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <param name="startTime">Starting time for recording.</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetHomeAsync">
      <summary>
Gets the home location.
</summary>
      <returns>
The home place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetKnownPlaceAsync(System.UInt32)">
      <summary>
Returns place matching the given place id. This method can be used to return any type of places: home, work, known and frequent.
</summary>
      <param name="id">Place id</param>
      <returns>
Queried Place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetKnownPlacesAsync">
      <summary>
Gets the set of currently known places. This includes all types of places: home, work, known and frequent.
</summary>
      <returns>
        <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
The current list of known places.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetPlaceAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the place at given time.
</summary>
      <param name="timestamp">time to get the place for</param>
      <returns>Place at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetPlaceHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of places visited during given time period.
</summary>
      <param name="startTime">start time</param>
      <param name="span">time span</param>
      <returns>Place history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, <see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetWorkAsync">
      <summary>
Gets the work location.
</summary>
      <returns>
The work place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="P:Lumia.Sense.Testing.PlaceMonitorSimulator.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.Testing.RecordingInfo">
      <summary>
Sensor recording metadata
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.RecordingInfo.Description">
      <summary>
Description of recording
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.RecordingInfo.Duration">
      <summary>
Recording duration
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.RecordingInfo.StartTime">
      <summary>
Recording start time
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.RecordingInfo.Type">
      <summary>
Recorded sensor type
</summary>
    </member>
    <member name="T:Lumia.Sense.Testing.SenseRecorder">
      <summary>
Utility for recording sensor data
<paragraph>
You can use <see cref="T:Lumia.Sense.Testing.SenseRecorder" /> to record data from a sensor for storage or playing back at 
a later date.
</paragraph></summary>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecorder.#ctor(Lumia.Sense.ISensor)">
      <summary>
Constructor
</summary>
      <param name="sensor">sensor to be recorded</param>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecorder.GetRecording">
      <summary>
Returns the recording
</summary>
      <returns>
Sensor recording
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="P:Lumia.Sense.Testing.SenseRecorder.IsRecording">
      <summary>
Returns whether the recorder is currently recording or not.
</summary>
      <returns>
        <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecorder.StartAsync">
      <summary>
Starts recording
</summary>
      <returns>Asynchronous task</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecorder.StopAsync">
      <summary>
Stops recording
</summary>
      <returns>Asynchronous task</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="T:Lumia.Sense.Testing.SenseRecording">
      <summary>
Container for <c>SenseRecorder</c> recording
</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.SenseRecording.Description">
      <summary>Description of the recording. Initially empty, can be modified by the developer to describe the recording before saving.</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.SenseRecording.Duration">
      <summary>Duration of the recording</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromFileAsync(System.String)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a file in application's installation directory.
</summary>
      <param name="filename">Recording file name</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromFileAsync(System.String,Windows.Storage.Streams.UnicodeEncoding)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a file in application's installation directory
</summary>
      <param name="filename">Recoding file name</param>
      <param name="encoding">Content encoding</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromText(System.String)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from given text string.
</summary>
      <param name="recordingData">Recording data</param>
      <param name="encoding">Content encoding</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromText(System.String,Windows.Storage.Streams.UnicodeEncoding)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from given text string.
</summary>
      <param name="recordingData">Recording data</param>
      <param name="encoding">Content encoding</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromUriAsync(Windows.Foundation.Uri)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a URI.
</summary>
      <param name="uri">Recording URI</param>
      <param name="encoding">Content encoding</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromUriAsync(Windows.Foundation.Uri,Windows.Storage.Streams.UnicodeEncoding)">
      <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a URI.
</summary>
      <param name="uri">Recording URI</param>
      <param name="encoding">Content encoding</param>
      <returns>Loaded recording</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.SenseRecording.SaveAsync">
      <summary>
Prompts user to save the recording in Json format in Documents folder
</summary>
      <returns>Asynchonous task</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="P:Lumia.Sense.Testing.SenseRecording.StartTime">
      <summary>Date of the recording</summary>
    </member>
    <member name="P:Lumia.Sense.Testing.SenseRecording.Type">
      <summary>Recorded sensor type</summary>
    </member>
    <member name="T:Lumia.Sense.Testing.StepCounterSimulator">
      <summary>
Represents a step counter sensor.
</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.ActivateAsync">
      <summary>
Re-establishes connection to sensor, if not already available
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.DeactivateAsync">
      <summary>
Closes the connection to sensor
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetCurrentReadingAsync">
      <summary>
Gets the current reading.
</summary>
      <returns>
The current reading of the sensor.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <param name="startTime">Start time for simulation.</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the step count at given time.
</summary>
      <param name="timestamp">time to get the step count for</param>
      <returns>Step count at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Gets the step count for given time range.
</summary>
      <param name="startTime">start time</param>
      <param name="span">time span</param>
      <param name="timestamp">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>timestamp</parameter>
            <parameter>M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)</parameter>
          </include>
        </markup>
      </param>
      <returns>Step count for the given range</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of step counts during given time period.
</summary>
      <param name="startTime">start time</param>
      <param name="span">time span</param>
      <returns>Step count history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="P:Lumia.Sense.Testing.StepCounterSimulator.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.Testing.TrackPointMonitorSimulator">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.ActivateAsync">
      <summary>
Re-establishes connection to sensor, if not already available
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.DeactivateAsync">
      <summary>
Closes the connection to sensor
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
      <summary>
Gets the default implementation.
</summary>
      <param name="recording">Sensor recording</param>
      <param name="startTime">Start time for simulation.</param>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetPointAtAsync(Windows.Foundation.DateTime)">
      <summary>
Returns a collected track point from the given time.
</summary>
      <param name="timestamp">Time stamp</param>
      <returns>Track point at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns collected track points for the given time period.
</summary>
      <param name="periodFrom">Start time</param>
      <param name="span">Time span</param>
      <returns>Track points for the given time period</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="P:Lumia.Sense.Testing.TrackPointMonitorSimulator.Type">
      <summary>
The sensor type.
</summary>
    </member>
  </members>
</doc>