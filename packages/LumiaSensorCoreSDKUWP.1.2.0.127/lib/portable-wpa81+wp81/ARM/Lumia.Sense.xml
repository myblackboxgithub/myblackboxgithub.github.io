<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Lumia.Sense</name>
  </assembly>
  <members>
    <member name="T:Lumia.Sense.Activity">
      <summary>
Enumeration representing different activity classes
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Unknown">
      <summary>
Unknown
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Idle">
      <summary>
Idle
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Moving">
      <summary>
Moving
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Stationary">
      <summary>
Stationary
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Walking">
      <summary>
Walking
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Running">
      <summary>
Running
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.Biking">
      <summary>
Biking
</summary>
    </member>
    <member name="F:Lumia.Sense.Activity.MovingInVehicle">
      <summary>
Moving in vehicle
</summary>
    </member>
    <member name="T:Lumia.Sense.ActivityMonitor">
      <summary>
Represents an activity state monitor sensor.
</summary>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.ActivateAsync">
      <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.DeactivateAsync">
      <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="P:Lumia.Sense.ActivityMonitor.Enabled">
      <summary>
Enables or disables activity change event monitoring.
</summary>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.GetActivityAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the device activity at given time.
</summary>
      <param name="timestamp">Time stamp</param>
      <returns>Activity at given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of activities occured during given time period.
</summary>
      <param name="periodFrom">Time period start</param>
      <param name="span">Time period length</param>
      <returns>Activity history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.GetCurrentReadingAsync">
      <summary>
Gets the current activity
</summary>
      <returns>Current activity</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitor.IsSupportedAsync">
      <summary>
Returns whether the sensor is supported by the device or not.
</summary>
      <returns>
        <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="E:Lumia.Sense.ActivityMonitor.ReadingChanged">
      <summary>
Occurs each time activity changes.
</summary>
    </member>
    <member name="P:Lumia.Sense.ActivityMonitor.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.ActivityMonitorReading">
      <summary>
Supported device placements.
</summary>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitorReading.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="M:Lumia.Sense.ActivityMonitorReading.#ctor(Lumia.Sense.Activity,Windows.Foundation.DateTime)">
      <summary>
Constructor
</summary>
      <param name="mode">Activity</param>
      <param name="timestamp">Time stamp</param>
    </member>
    <member name="P:Lumia.Sense.ActivityMonitorReading.Mode">
      <summary>
Gets the activity.
</summary>
    </member>
    <member name="P:Lumia.Sense.ActivityMonitorReading.Timestamp">
      <summary>
Gets the time at which the sensor reported the reading.
</summary>
    </member>
    <member name="T:Lumia.Sense.ActivityReadingChangedEventHandler">
      <summary>
Delegate type the <c>ReadingChanged</c> event handler of <c>ActivityMonitor</c>.
</summary>
      <param name="source">event source</param>
      <param name="value">activity reading</param>
    </member>
    <member name="T:Lumia.Sense.ApiSupportedCapabilities">
      <summary>
Supported capabilities info
</summary>
    </member>
    <member name="P:Lumia.Sense.ApiSupportedCapabilities.MotionDataSettingsTriggers">
      <summary>
        <c>true</c> if motion data settings triggers are supported, <c>false</c> otherwise.</summary>
    </member>
    <member name="P:Lumia.Sense.ApiSupportedCapabilities.StepCounterTrigger">
      <summary>
        <c>true</c> if step counter trigger is supported, <c>false</c> otherwise.
</summary>
    </member>
    <member name="T:Lumia.Sense.DataCollectionQuality">
      <summary>
Data collection quality settings
</summary>
    </member>
    <member name="F:Lumia.Sense.DataCollectionQuality.Basic">
      <summary>Basic data collection quality</summary>
    </member>
    <member name="F:Lumia.Sense.DataCollectionQuality.Detailed">
      <summary>Detailed data collection quality</summary>
    </member>
    <member name="T:Lumia.Sense.IActivityMonitor">
      <summary>
Represents an activity state monitor sensor.
</summary>
    </member>
    <member name="P:Lumia.Sense.IActivityMonitor.Enabled">
      <summary>
Enables or disables activity change event monitoring.
</summary>
    </member>
    <member name="M:Lumia.Sense.IActivityMonitor.GetActivityAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the device activity at given time.
</summary>
      <param name="timestamp">Time stamp</param>
      <returns>Activity at given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IActivityMonitor.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of activities occured during given time period.
</summary>
      <param name="periodFrom">Time period start</param>
      <param name="span">Time period length</param>
      <returns>Activity history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IActivityMonitor.GetCurrentReadingAsync">
      <summary>
Gets the current activity
</summary>
      <returns>Current activity</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="E:Lumia.Sense.IActivityMonitor.ReadingChanged">
      <summary>
Occurs each time activity changes.
</summary>
    </member>
    <member name="T:Lumia.Sense.IPlaceMonitor">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
frequently visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetHomeAsync">
      <summary>
Gets the home location.
</summary>
      <returns>
The home place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetKnownPlaceAsync(System.UInt32)">
      <summary>
Returns place matching the given place id. This method can be used to return any type of places: home, work, known and frequent.
</summary>
      <param name="id">Place id</param>
      <returns>
Queried Place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetKnownPlacesAsync">
      <summary>
Gets the set of currently known places. This includes all types of places: home, work, known and frequent.
</summary>
      <returns>
The current list of known places.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetPlaceAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the place at given time.
</summary>
      <param name="timestamp">Time to get the place for</param>
      <returns>Place at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetPlaceHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of places visited during given time period.
</summary>
      <param name="startTime">Start time</param>
      <param name="span">Time span</param>
      <returns>Place history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, <see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IPlaceMonitor.GetWorkAsync">
      <summary>
Gets the work location.
</summary>
      <returns>
The work place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="T:Lumia.Sense.ISensor">
      <summary>
Base class for all SensorCore SDK sensors
</summary>
    </member>
    <member name="M:Lumia.Sense.ISensor.ActivateAsync">
      <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="M:Lumia.Sense.ISensor.DeactivateAsync">
      <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
    </member>
    <member name="P:Lumia.Sense.ISensor.Type">
      <summary>
Gets the sensor type.
</summary>
      <returns>sensor type</returns>
    </member>
    <member name="T:Lumia.Sense.IStepCounter">
      <summary>
Represents a step counter sensor.
</summary>
    </member>
    <member name="M:Lumia.Sense.IStepCounter.GetCurrentReadingAsync">
      <summary>
Gets the current walking and running step counts since the last Motion Data reset.
</summary>
      <returns>
The current reading of the sensor.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IStepCounter.GetStepCountAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the step count at given time.
</summary>
      <param name="timestamp">time to get the step count for</param>
      <returns>Step count at the given time. Returns <c>null</c> if no step count is available for the given time.</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IStepCounter.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Gets the step count for given time range.
</summary>
      <param name="timestamp">start time</param>
      <param name="span">time span</param>
      <returns>Step count for the given range. Returns <c>null</c> if no step count is available for the given range.</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />,
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.IStepCounter.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of step counts during given time period.
</summary>
      <param name="startTime">start time</param>
      <param name="span">time span</param>
      <returns>Step count history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="T:Lumia.Sense.ITrackPointMonitor">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.ITrackPointMonitor.GetPointAtAsync(Windows.Foundation.DateTime)">
      <summary>
Returns a collected track point from the given time.
</summary>
      <param name="timestamp">Time stamp</param>
      <returns>Track point at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.ITrackPointMonitor.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns collected track points for the given time period.
</summary>
      <param name="periodFrom">Start time</param>
      <param name="span">Time span</param>
      <returns>Track points for the given time period</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="T:Lumia.Sense.MotionDataSettings">
      <summary>
Motion data settings
</summary>
    </member>
    <member name="M:Lumia.Sense.MotionDataSettings.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="P:Lumia.Sense.MotionDataSettings.DataQuality">
      <summary>
Data collection quality
</summary>
    </member>
    <member name="P:Lumia.Sense.MotionDataSettings.LocationEnabled">
      <summary>
        <c>true</c> if location is enabled in system settings, <c>false</c> otherwise.
</summary>
    </member>
    <member name="P:Lumia.Sense.MotionDataSettings.PlacesVisited">
      <summary>
        <c>true</c> if places visited is enabled in Motion data settings, <c>false</c> otherwise.
</summary>
    </member>
    <member name="P:Lumia.Sense.MotionDataSettings.Version">
      <summary>
Motion data settings application version
</summary>
    </member>
    <member name="T:Lumia.Sense.Place">
      <summary>
Contains information about a known place.
</summary>
    </member>
    <member name="M:Lumia.Sense.Place.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="M:Lumia.Sense.Place.#ctor(Lumia.Sense.Place)">
      <summary>
Constructor
</summary>
      <param name="place">Place</param>
    </member>
    <member name="M:Lumia.Sense.Place.#ctor(System.UInt32,Lumia.Sense.PlaceKind,Windows.Devices.Geolocation.BasicGeoposition,System.Double)">
      <summary>
Constructor
</summary>
      <param name="id">Place id</param>
      <param name="kind">Place kind</param>
      <param name="position">Place location</param>
      <param name="radius">Place radius</param>
    </member>
    <member name="M:Lumia.Sense.Place.#ctor(System.UInt32,Lumia.Sense.PlaceKind,Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,Windows.Foundation.TimeSpan,System.UInt32)">
      <summary>
Constructor
</summary>
      <param name="id">Place id</param>
      <param name="kind">Place kind</param>
      <param name="position">Place location</param>
      <param name="radius">Place radius</param>
      <param name="timestamp">Last visit timestamp</param>
      <param name="lengthOfStay">Last visit length of stay</param>
      <param name="totalLengthOfStay">Total length of stay</param>
      <param name="totalVisitCount">Total visit count</param>
    </member>
    <member name="P:Lumia.Sense.Place.Id">
      <summary>Unique identifier of the place.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.Kind">
      <summary>Type or kind of the place.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.LengthOfStay">
      <summary>Time how long the device stayed in this location during last visit.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.Position">
      <summary>Geographic position of the place.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.Radius">
      <summary>The radius of the circular area of the place centered at <see cref="P:Lumia.Sense.Place.Position" /> in meters.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.Timestamp">
      <summary> The time when the place has beed entered.</summary>
    </member>
    <member name="P:Lumia.Sense.Place.TotalLengthOfStay">
      <summary>
Time how long the device stayed in this location in total.
</summary>
    </member>
    <member name="P:Lumia.Sense.Place.TotalVisitCount">
      <summary>
Total number of times the device has visited this place.
</summary>
    </member>
    <member name="T:Lumia.Sense.PlaceKind">
      <summary>
Indicates the type or kind of a place.
</summary>
    </member>
    <member name="F:Lumia.Sense.PlaceKind.Home">
      <summary>Home or home-like place.</summary>
    </member>
    <member name="F:Lumia.Sense.PlaceKind.Work">
      <summary>Place of work.</summary>
    </member>
    <member name="F:Lumia.Sense.PlaceKind.Known">
      <summary>Other known place.</summary>
    </member>
    <member name="F:Lumia.Sense.PlaceKind.Frequent">
      <summary>Frequently visited known place.</summary>
    </member>
    <member name="T:Lumia.Sense.PlaceMonitor">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
frequently visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.ActivateAsync">
      <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.DeactivateAsync">
      <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetHomeAsync">
      <summary>
Gets the home location.
</summary>
      <returns>
The home place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlaceAsync(System.UInt32)">
      <summary>
Returns place matching the given place id. This method can be used to return any type of places: home, work, known and frequent.
</summary>
      <param name="id">Place id</param>
      <returns>
Queried Place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetKnownPlacesAsync">
      <summary>
Gets the set of currently known places. This includes all types of places: home, work, known and frequent.
</summary>
      <returns>
The current list of known places.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetPlaceAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the place at given time.
</summary>
      <param name="timestamp">Time to get the place for</param>
      <returns>Place at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetPlaceHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of places visited during given time period.
</summary>
      <param name="startTime">Start time</param>
      <param name="span">Time span</param>
      <returns>Place history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, <see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.GetWorkAsync">
      <summary>
Gets the work location.
</summary>
      <returns>
The work place.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.PlaceMonitor.IsSupportedAsync">
      <summary>
Returns whether the sensor is supported by the device or not.
</summary>
      <returns>
        <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="P:Lumia.Sense.PlaceMonitor.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.SenseError">
      <summary>
Sense error codes
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.GeneralFailure">
      <summary>
General failure
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.NotFound">
      <summary>
Item not found. There was no item matching the given criteria found.
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.SenseDisabled">
      <summary>
User has disabled motion data collection from the Motion data settings
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.LocationDisabled">
      <summary>
Location is disabled by the user from the Location settings
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.InvalidParameter">
      <summary>
Invalid input parameter(s)
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.Busy">
      <summary>
The component is busy, try again later
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.SensorNotAvailable">
      <summary>
Such sensor is not available on this device
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.SenseNotAvailable">
      <summary>
SensorCore SDK is not supported on this device
</summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.SensorDeactivated">
      <summary>
Sensor is deactivated. You need to reactivate it by calling <c>ActivateAsync()</c></summary>
    </member>
    <member name="F:Lumia.Sense.SenseError.IncompatibleSDK">
      <summary>
Incompatible SDK. Sense platform in the device is incompatible with the SDK version.
Please make sure to update to the latest SDK version.
</summary>
    </member>
    <member name="T:Lumia.Sense.SenseHelper">
      <summary>
Helper class providing miscellaneous Sense helper methods
</summary>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)">
      <summary>
Returns Sense error matching the given HResult code from an exception
</summary>
      <param name="hresult">HResult code received from exception thrown by Sense API</param>
      <returns>Sense error code</returns>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.GetSettingsAsync">
      <summary>
Returns Motion data settings
</summary>
      <returns>Motion data settings</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.GetSupportedApiSetAsync">
      <summary>
Returns the API set supported by the device
</summary>
      <returns>API set supported by the device</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.GetSupportedCapabilitiesAsync">
      <summary>
Returns the supported capabilities
</summary>
      <returns>Object containing capability details</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.LaunchLocationSettingsAsync">
      <summary>
Launches Location settings
</summary>
      <returns>true if settings was launched, false otherwise</returns>
    </member>
    <member name="M:Lumia.Sense.SenseHelper.LaunchSenseSettingsAsync">
      <summary>
Launches Sense settings
</summary>
      <returns>true if settings was launched, false otherwise</returns>
    </member>
    <member name="T:Lumia.Sense.SenseTrigger">
      <summary>
Sense device manufacturer triggers
</summary>
    </member>
    <member name="P:Lumia.Sense.SenseTrigger.MotionDataCleared">
      <summary>
Raised when motion data is cleared.
</summary>
    </member>
    <member name="P:Lumia.Sense.SenseTrigger.SenseApiStateChanged">
      <summary>
Raised when "Places visited" in Motion data settings or system location setting has been switched on or off.
</summary>
    </member>
    <member name="P:Lumia.Sense.SenseTrigger.StepCounterUpdate">
      <summary>
Raised when user has moved at least 5 steps and at least 10 minutes have elapsed since last step counter trigger. Also raised at 
midnight in order for step counter applications to reset their daily statistics.
</summary>
    </member>
    <member name="T:Lumia.Sense.SensorType">
      <summary>
Indicates the type of the sensor.
</summary>
    </member>
    <member name="F:Lumia.Sense.SensorType.ActivityMonitor">
      <summary> Activity monitor </summary>
    </member>
    <member name="F:Lumia.Sense.SensorType.StepCounter">
      <summary> Step counter </summary>
    </member>
    <member name="F:Lumia.Sense.SensorType.PlaceMonitor">
      <summary> Place monitor </summary>
    </member>
    <member name="F:Lumia.Sense.SensorType.TrackPointMonitor">
      <summary> Track point monitor </summary>
    </member>
    <member name="T:Lumia.Sense.StepCount">
      <summary>
Step count provides access to property values that tell current walking and running step counts and time spent walking and running. 
</summary>
    </member>
    <member name="M:Lumia.Sense.StepCount.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="M:Lumia.Sense.StepCount.#ctor(System.UInt32,Windows.Foundation.TimeSpan,System.UInt32,Windows.Foundation.TimeSpan)">
      <summary>
Constructor
</summary>
      <param name="walkingStepCount">walking step count</param>
      <param name="walkTime">walk time</param>
      <param name="runningStepCount">running step count</param>
      <param name="runTime">run time</param>
    </member>
    <member name="P:Lumia.Sense.StepCount.RunningStepCount">
      <summary>
Gets the number of running steps taken since the motion data was enabled.
</summary>
      <returns>running step count</returns>
    </member>
    <member name="P:Lumia.Sense.StepCount.RunTime">
      <summary>
Gets the time spent running since the motion data was enabled.
</summary>
      <returns>total running duration</returns>
    </member>
    <member name="P:Lumia.Sense.StepCount.WalkingStepCount">
      <summary>
Gets the number of walking steps taken since the motion data was enabled.
</summary>
      <returns>walking step count</returns>
    </member>
    <member name="P:Lumia.Sense.StepCount.WalkTime">
      <summary>
Gets the time spent walking since the motion data was enabled.
</summary>
      <returns>total walk duration</returns>
    </member>
    <member name="T:Lumia.Sense.StepCounter">
      <summary>
Represents a step counter sensor.
</summary>
    </member>
    <member name="M:Lumia.Sense.StepCounter.ActivateAsync">
      <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.DeactivateAsync">
      <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.GetCurrentReadingAsync">
      <summary>
Gets the current walking and running step counts since the last Motion Data reset.
</summary>
      <returns>
The current reading of the sensor.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />. 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.GetStepCountAtAsync(Windows.Foundation.DateTime)">
      <summary>
Gets the step count at given time.
</summary>
      <param name="timestamp">time to get the step count for</param>
      <returns>Step count at the given time. Returns <c>null</c> if no step count is available for the given time.</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Gets the step count for given time range.
</summary>
      <param name="timestamp">start time</param>
      <param name="span">time span</param>
      <returns>Step count for the given range. Returns <c>null</c> if no step count is available for the given range.</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />,
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns time ordered list of step counts during given time period. Returns an empty vector if no history items are found.
</summary>
      <param name="startTime">start time</param>
      <param name="span">time span</param>
      <returns>Step count history</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.StepCounter.IsSupportedAsync">
      <summary>
Returns whether the sensor is supported by the device or not.
</summary>
      <returns>
        <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="P:Lumia.Sense.StepCounter.Type">
      <summary>
The sensor type.
</summary>
    </member>
    <member name="T:Lumia.Sense.StepCounterReading">
      <summary>
Represents a reading of the <c>StepCounter</c>.
</summary>
    </member>
    <member name="M:Lumia.Sense.StepCounterReading.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="M:Lumia.Sense.StepCounterReading.#ctor(System.UInt32,Windows.Foundation.TimeSpan,System.UInt32,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
      <summary>
Constructor
</summary>
      <param name="walkingStepCount">walking step count</param>
      <param name="walkTime">walk time</param>
      <param name="runningStepCount">running step count</param>
      <param name="runTime">run time</param>
      <param name="timestamp">timestamp</param>
    </member>
    <member name="P:Lumia.Sense.StepCounterReading.RunningStepCount">
      <summary>
Gets the number of running steps taken since the motion data was enabled.
</summary>
      <returns>running step count</returns>
    </member>
    <member name="P:Lumia.Sense.StepCounterReading.RunTime">
      <summary>
Gets the time spent running since the motion data was enabled.
</summary>
      <returns>total running duration</returns>
    </member>
    <member name="P:Lumia.Sense.StepCounterReading.Timestamp">
      <summary>
Gets the creation time of the sensor reading.
</summary>
      <returns>timestamp</returns>
    </member>
    <member name="P:Lumia.Sense.StepCounterReading.WalkingStepCount">
      <summary>
Gets the number of walking steps taken since the motion data was enabled.
</summary>
      <returns>walking step count</returns>
    </member>
    <member name="P:Lumia.Sense.StepCounterReading.WalkTime">
      <summary>
Gets the time spent walking since the motion data was enabled.
</summary>
      <returns>total walk duration</returns>
    </member>
    <member name="T:Lumia.Sense.TrackPoint">
      <summary>
Represents a point within a route the device has been located in.
</summary>
    </member>
    <member name="M:Lumia.Sense.TrackPoint.#ctor">
      <summary>
Constructor
</summary>
    </member>
    <member name="M:Lumia.Sense.TrackPoint.#ctor(Lumia.Sense.TrackPoint)">
      <summary>
Constructor
</summary>
      <param name="trackPoint">Track point</param>
    </member>
    <member name="M:Lumia.Sense.TrackPoint.#ctor(System.UInt32,Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
      <summary>
Overloaded Constructor
</summary>
      <param name="id">Place Id</param>
      <param name="position">Position</param>
      <param name="radius">Radius</param>
      <param name="lengthOfStay">Length of stay</param>
      <param name="timestamp">Time stamp</param>
    </member>
    <member name="M:Lumia.Sense.TrackPoint.#ctor(Windows.Devices.Geolocation.BasicGeoposition,System.Double,Windows.Foundation.TimeSpan,Windows.Foundation.DateTime)">
      <summary>
Constructor
</summary>
      <param name="position">Position</param>
      <param name="radius">Radius</param>
      <param name="lengthOfStay">Length of stay</param>
      <param name="timestamp">Time stamp</param>
    </member>
    <member name="P:Lumia.Sense.TrackPoint.Id">
      <summary>Unique identifier of the place.</summary>
    </member>
    <member name="P:Lumia.Sense.TrackPoint.LengthOfStay">
      <summary>Time how long the device stayed at this point.</summary>
    </member>
    <member name="P:Lumia.Sense.TrackPoint.Position">
      <summary>Geographic position of the track point.</summary>
    </member>
    <member name="P:Lumia.Sense.TrackPoint.Radius">
      <summary>The estimated radius of a circular area around the location  
which reflects the used positioning technology.</summary>
    </member>
    <member name="P:Lumia.Sense.TrackPoint.Timestamp">
      <summary>Time of entry to the location.</summary>
    </member>
    <member name="T:Lumia.Sense.TrackPointMonitor">
      <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.ActivateAsync">
      <summary>
Re-establishes the communication channel with underlying sensor, if it doesn't already exist.
Connection needs to be re-established when the application is brought to foreground.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.DeactivateAsync">
      <summary>
Closes the communication channel with underlying sensor. Connection must be closed whenever application
is put to background.
</summary>
      <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.GetDefaultAsync">
      <summary>
Gets the default implementation.
</summary>
      <returns>
The default implementation. Throws exception if sensor is not supported on the device.
</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SenseNotAvailable" />, <see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" />, 
<see cref="F:Lumia.Sense.SenseError.IncompatibleSDK" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.GetPointAtAsync(Windows.Foundation.DateTime)">
      <summary>
Returns a collected track point from the given time.
</summary>
      <param name="timestamp">Time stamp</param>
      <returns>Track point at the given time</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
      <summary>
Returns collected track points for the given time period.
</summary>
      <param name="periodFrom">Start time</param>
      <param name="span">Time span</param>
      <returns>Track points for the given time period</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />,  
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="M:Lumia.Sense.TrackPointMonitor.IsSupportedAsync">
      <summary>
Returns whether the sensor is supported by the device or not.
</summary>
      <returns>
        <c>true</c> if the sensor is supported, <c>false</c> otherwise</returns>
      <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
    </member>
    <member name="P:Lumia.Sense.TrackPointMonitor.Type">
      <summary>
The sensor type.
</summary>
    </member>
  </members>
</doc>